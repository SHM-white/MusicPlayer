# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Windows x64

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Update submodules
      run: git submodule update --init --recursive
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.8.2'
        host: 'windows'
        dir: '${{ github.workspace }}/qt/'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qt3d.debug_information qt3d qt5compat.debug_information qt5compat qtactiveqt.debug_information qtactiveqt qtcharts.debug_information qtcharts qtconnectivity.debug_information qtconnectivity qtdatavis3d.debug_information qtdatavis3d qtgraphs.debug_information qtgraphs qtgrpc.debug_information qtgrpc qthttpserver.debug_information qthttpserver qtimageformats.debug_information qtimageformats qtlanguageserver qtlocation.debug_information qtlocation qtlottie.debug_information qtlottie qtmultimedia.debug_information qtmultimedia qtnetworkauth.debug_information qtnetworkauth qtpositioning.debug_information qtpositioning qtquick3d.debug_information qtquick3d qtquick3dphysics.debug_information qtquick3dphysics qtquickeffectmaker.debug_information qtquickeffectmaker qtquicktimeline.debug_information qtquicktimeline qtremoteobjects.debug_information qtremoteobjects qtscxml.debug_information qtscxml qtsensors.debug_information qtsensors qtserialbus.debug_information qtserialbus qtserialport.debug_information qtserialport qtshadertools.debug_information qtshadertools qtspeech.debug_information qtspeech qtvirtualkeyboard.debug_information qtvirtualkeyboard qtwebchannel.debug_information qtwebchannel qtwebsockets.debug_information qtwebsockets qtwebview.debug_information qtwebview debug_info'
        tools: 'tools_ninja'
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH="${{ github.workspace }}/qt/6.8.2/msvc2022_64"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} || cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} || cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} || echo "ignoring"

    - name: Check dir
      run: ls ${{ github.workspace }}/qt/Qt/6.8.2/msvc2022_64/bin

    - name: Deploy
      run: ${{ github.workspace }}/qt/Qt/6.8.2/msvc2022_64/bin/windeployqt ${{github.workspace}}/build/Release/MusicPlayer.exe

    - name: Upload build
      uses: actions/upload-artifact@v4.6.2
      with:
        # Artifact name
        name: Windows-x64 # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/build/Release/
        # The desired behavior if no files are found using the provided path.

    - name: Run lupdate
      run: cmake --build ${{github.workspace}}/build --target lupdate_task || echo "lupdate failed, ignoring."

    - name: Run lrelease
      run: cmake --build ${{github.workspace}}/build --target lrelease_task || cmake --build ${{github.workspace}}/build --target lrelease_task || cmake --build ${{github.workspace}}/build --target lrelease_task || echo "lrelease failed, ignoring." || true

    - name: Upload qm file
      uses: actions/upload-artifact@v4.6.2
      with:
        # Artifact name
        name: Translation file # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/MusicPlayer_zh_CN.qm
        # The desired behavior if no files are found using the provided path.


